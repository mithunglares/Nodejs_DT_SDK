"use strict";
/*
    Copyright 2019 Dynatrace LLC

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDummySdk = void 0;
// ============================================================================
var useNewBufferApi = typeof (Buffer.alloc) === "function";
function BufferFrom(str, encoding) {
    // tslint:disable-next-line:deprecation
    return useNewBufferApi ? Buffer.from(str, encoding) : new Buffer(str, encoding);
}
var DummyTracer = /** @class */ (function () {
    function DummyTracer() {
    }
    DummyTracer.prototype.start = function (handler) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (typeof handler !== "function") {
            throw new TypeError("OneAgent SDK: Tracer.start() first parameter must be a function, but received " + typeof (handler));
        }
        return handler.call.apply(handler, __spreadArrays([undefined], args));
    };
    DummyTracer.prototype.startWithContext = function (handler, thisObj) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (typeof handler !== "function") {
            throw new TypeError("OneAgent SDK: Tracer.start() first parameter must be a function, but received " + typeof (handler));
        }
        return handler.call.apply(handler, __spreadArrays([thisObj], args));
    };
    DummyTracer.prototype.error = function () {
        return this;
    };
    return DummyTracer;
}());
var DummyIncomingTracer = /** @class */ (function (_super) {
    __extends(DummyIncomingTracer, _super);
    function DummyIncomingTracer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyIncomingTracer.prototype.end = function () {
        // empty
    };
    return DummyIncomingTracer;
}(DummyTracer));
var DummyOutgoingTracer = /** @class */ (function (_super) {
    __extends(DummyOutgoingTracer, _super);
    function DummyOutgoingTracer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyOutgoingTracer.prototype.end = function (handler) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.endWithContext.apply(this, __spreadArrays([handler, undefined], args));
    };
    DummyOutgoingTracer.prototype.endWithContext = function (handler, thisObj) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (handler !== undefined) {
            if (typeof handler !== "function") {
                throw new TypeError("OneAgent SDK: Tracer.end() first parameter must be a function, but received " + typeof (handler));
            }
            return handler.call.apply(handler, __spreadArrays([thisObj], args));
        }
        return undefined;
    };
    return DummyOutgoingTracer;
}(DummyTracer));
var DummyOutgoingTaggableTracer = /** @class */ (function (_super) {
    __extends(DummyOutgoingTaggableTracer, _super);
    function DummyOutgoingTaggableTracer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyOutgoingTaggableTracer.prototype.getDynatraceStringTag = function () {
        return "";
    };
    DummyOutgoingTaggableTracer.prototype.getDynatraceByteTag = function () {
        return BufferFrom("");
    };
    return DummyOutgoingTaggableTracer;
}(DummyOutgoingTracer));
var DummyDatabaseRequestTracer = /** @class */ (function (_super) {
    __extends(DummyDatabaseRequestTracer, _super);
    function DummyDatabaseRequestTracer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyDatabaseRequestTracer.prototype.setResultData = function () {
        return this;
    };
    return DummyDatabaseRequestTracer;
}(DummyOutgoingTracer));
var DummyOutgoingMessageTracer = /** @class */ (function (_super) {
    __extends(DummyOutgoingMessageTracer, _super);
    function DummyOutgoingMessageTracer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyOutgoingMessageTracer.prototype.setVendorMessageId = function () {
        return this;
    };
    DummyOutgoingMessageTracer.prototype.setCorrelationId = function () {
        return this;
    };
    return DummyOutgoingMessageTracer;
}(DummyOutgoingTaggableTracer));
var DummyIncomingMessageTracer = /** @class */ (function (_super) {
    __extends(DummyIncomingMessageTracer, _super);
    function DummyIncomingMessageTracer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummyIncomingMessageTracer.prototype.setVendorMessageId = function () {
        return this;
    };
    DummyIncomingMessageTracer.prototype.setCorrelationId = function () {
        return this;
    };
    return DummyIncomingMessageTracer;
}(DummyIncomingTracer));
// ----------------------------------------------------------------------------
var DummyCounter = /** @class */ (function () {
    function DummyCounter() {
    }
    DummyCounter.prototype.increaseBy = function () {
        // empty
    };
    return DummyCounter;
}());
var DummyGauge = /** @class */ (function () {
    function DummyGauge() {
    }
    DummyGauge.prototype.setValue = function () {
        // empty
    };
    return DummyGauge;
}());
var DummyStatistics = /** @class */ (function () {
    function DummyStatistics() {
    }
    DummyStatistics.prototype.addValue = function () {
        // empty
    };
    return DummyStatistics;
}());
// ----------------------------------------------------------------------------
// tslint:disable-next-line:ban-types
function dummyPassContext(func) {
    return func;
}
// ----------------------------------------------------------------------------
function dummyTraceSQLDatabaseRequest() {
    return new DummyDatabaseRequestTracer();
}
function dummyTraceIncomingRemoteCall() {
    return new DummyIncomingTracer();
}
function dummyTraceOutgoingRemoteCall() {
    return new DummyOutgoingTaggableTracer();
}
function dummyTraceOutgoingMessage() {
    return new DummyOutgoingMessageTracer();
}
function dummyTraceIncomingMessage() {
    return new DummyIncomingMessageTracer();
}
function dummyAddCustomRequestAttribute() {
    // intentionally empty
}
// ----------------------------------------------------------------------------
function dummyCreateIntegerCounterMetric() {
    return new DummyCounter();
}
function dummyCreateFloatCounterMetric() {
    return new DummyCounter();
}
function dummyCreateIntegerGaugeMetric() {
    return new DummyGauge();
}
function dummyCreateFloatGaugeMetric() {
    return new DummyGauge();
}
function dummyCreateIntegerStatisticsMetric() {
    return new DummyStatistics();
}
function dummyCreateFloatStatisticsMetric() {
    return new DummyStatistics();
}
// ----------------------------------------------------------------------------
function dummyGetCurrentState() {
    return 2 /* PERMANENTLY_INACTIVE */;
}
function dummySetLoggingCallback() {
    // intentionally empty
}
// ============================================================================
function getDummySdk() {
    return {
        passContext: dummyPassContext,
        traceSQLDatabaseRequest: dummyTraceSQLDatabaseRequest,
        traceIncomingRemoteCall: dummyTraceIncomingRemoteCall,
        traceOutgoingRemoteCall: dummyTraceOutgoingRemoteCall,
        traceOutgoingMessage: dummyTraceOutgoingMessage,
        traceIncomingMessage: dummyTraceIncomingMessage,
        addCustomRequestAttribute: dummyAddCustomRequestAttribute,
        createIntegerCounterMetric: dummyCreateIntegerCounterMetric,
        createFloatCounterMetric: dummyCreateFloatCounterMetric,
        createIntegerGaugeMetric: dummyCreateIntegerGaugeMetric,
        createFloatGaugeMetric: dummyCreateFloatGaugeMetric,
        createIntegerStatisticsMetric: dummyCreateIntegerStatisticsMetric,
        createFloatStatisticsMetric: dummyCreateFloatStatisticsMetric,
        getCurrentState: dummyGetCurrentState,
        setLoggingCallbacks: dummySetLoggingCallback
    };
}
exports.getDummySdk = getDummySdk;
